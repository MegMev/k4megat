* Parallelization
** An overview of latest trends in HENP software development
*Parallelization* is a big topic which often comes together with terminology such as multi-processing,
multi-threading, vectorization etc., but not limited to these.
There is a big trend/wave of renewing the software stack to accommodate the needs of parallelization
in recent years, both in industry and academics.
This is driven by the fact that computing hardware architectures are more parallelized than ever before
as well as the popularity of machine learning algorithms which are natively parallelization-essential.
In essence, these changes result in better productivity efficiency and more accurate results in big data
analysis.

To adapt to these trends, C++, the programming language which is used to build the backbone infrastructure of HENP
software stack, is undergoing a major change right now. These changes are so enormous that C++ will
almost come out as a new language when finished.
It will be more expressive, more elegant, more safe and most importantly more easier to write a high-performance
software using new C++features.

Besides these, the data science community has developed many useful tools which are very useful for
the last-mile analysis (i.e., the physics analysis which mostly uses statistical techniques).
The community is so big and the development is so fast that it's unwise for HENP community to keep itself
isolated. If you can't beat it, join it. Also, HENP community has also developed some genuine tools which
may be valuable to the more general data science community.

HENP community is fully aware of these developments and responds with some strategic plan in the next
5~10 years [ref]. Take ROOT for example, it has ambiguous plan to redesign the basic components such as
RDataFrame, RNTuple, RooFit, TMVA etc., even GUI. While the backward compatibility is guranteed, most
development will focus on the new development of ROOT-7. Other common software packages like Geant4,
Gaudi etc. all have similar plan to modernize the code base.

There will be massive work in this process. Considering the fact that all experiments face more or less
similar problems, it's unwise not to organize the distributed resources to develop a common software
stack for future experiments. This is the goal of key4hep.

** An overview of parallelization technology
- execution parallelization
- data parallelization
- multi-node parallelization (a.k.a, distributed computing)

** Parallelization in k4megat
*** GaudiHive

*** Geant4 MT

*** EDM4hep MT

*** RDataFrame
